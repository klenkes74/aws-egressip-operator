// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	cloudprovider "github.com/klenkes74/aws-egressip-operator/pkg/cloudprovider"
	mock "github.com/stretchr/testify/mock"

	net "net"
)

// CloudProvider is an autogenerated mock type for the CloudProvider type
type CloudProvider struct {
	mock.Mock
}

// AddRandomIPs provides a mock function with given fields:
func (_m *CloudProvider) AddRandomIPs() ([]string, []*net.IP, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 []*net.IP
	if rf, ok := ret.Get(1).(func() []*net.IP); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*net.IP)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AddSpecifiedIPs provides a mock function with given fields: ips
func (_m *CloudProvider) AddSpecifiedIPs(ips []*net.IP) ([]string, error) {
	ret := _m.Called(ips)

	var r0 []string
	if rf, ok := ret.Get(0).(func([]*net.IP) []string); ok {
		r0 = rf(ips)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*net.IP) error); ok {
		r1 = rf(ips)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterTag provides a mock function with given fields:
func (_m *CloudProvider) ClusterTag() (string, string) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// Instance provides a mock function with given fields: instanceID
func (_m *CloudProvider) Instance(instanceID string) (*cloudprovider.CloudInstance, error) {
	ret := _m.Called(instanceID)

	var r0 *cloudprovider.CloudInstance
	if rf, ok := ret.Get(0).(func(string) *cloudprovider.CloudInstance); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudprovider.CloudInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceByHostName provides a mock function with given fields: hostname
func (_m *CloudProvider) InstanceByHostName(hostname string) (*cloudprovider.CloudInstance, error) {
	ret := _m.Called(hostname)

	var r0 *cloudprovider.CloudInstance
	if rf, ok := ret.Get(0).(func(string) *cloudprovider.CloudInstance); ok {
		r0 = rf(hostname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudprovider.CloudInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hostname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveIP provides a mock function with given fields: ip
func (_m *CloudProvider) RemoveIP(ip *net.IP) (string, error) {
	ret := _m.Called(ip)

	var r0 string
	if rf, ok := ret.Get(0).(func(*net.IP) string); ok {
		r0 = rf(ip)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*net.IP) error); ok {
		r1 = rf(ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
