// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// CloudNetwork is an autogenerated mock type for the CloudNetwork type
type CloudNetwork struct {
	mock.Mock
}

// AvailableIPCount provides a mock function with given fields:
func (_m *CloudNetwork) AvailableIPCount() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Cidr provides a mock function with given fields:
func (_m *CloudNetwork) Cidr() *net.IPNet {
	ret := _m.Called()

	var r0 *net.IPNet
	if rf, ok := ret.Get(0).(func() *net.IPNet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*net.IPNet)
		}
	}

	return r0
}

// DefaultForFailureZone provides a mock function with given fields:
func (_m *CloudNetwork) DefaultForFailureZone() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FailureZone provides a mock function with given fields:
func (_m *CloudNetwork) FailureZone() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsIPInNetwork provides a mock function with given fields: ip
func (_m *CloudNetwork) IsIPInNetwork(ip *net.IP) bool {
	ret := _m.Called(ip)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*net.IP) bool); ok {
		r0 = rf(ip)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *CloudNetwork) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// URI provides a mock function with given fields:
func (_m *CloudNetwork) URI() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
